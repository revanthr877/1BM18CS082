#include<stdio.h>
#include<stdlib.h>

typedef struct List
{
	int data;
	struct List *next;
}list;

list *temp;
list *head=0;

void insert_at_front(int item)
{
	
	temp=(list*)malloc(sizeof(list));
	temp->data=item;
	temp->next=head;
	head=temp;
	
}

void delete_at_front()
{
	list *prt=head;
	head=head->next;
	free(prt);
}



void delete_at_rear(int count)
{
	list *prt=head,*pre=head;
	if(count==1)
	{
		head=0;
	}
	else
	{
		while(prt->next!=0)
		{
			pre=prt;
			prt=prt->next;
		}
		pre->next=0;
	}
	free(prt);
}


void delete_at_position(int pos,int count)
{
	int i;
	if(pos>count || pos<1)
	{
		printf("\n invalid position");
		return;
	}
	list *prt=head,*pre;
	if(pos==1)
	{
		head=head->next;
		free(prt);
	}
	else
	{
		for(i=1;i<pos-1;i++)
		{
			prt=prt->next;
		}
		pre=prt->next;
		prt->next=pre->next;
		free(pre);		
	}
}

void display()
{
	temp=head;

	while(temp!=0)
	{
		printf("\n%d",temp->data);
		temp=temp->next;
	}
}


int main()
{

int item,n,pos,count=0;
while(1)
{
printf("\n\nchoose an operation :");
printf("\n1.insert at front\n2.delete at front\n3.delete at rear\n4.delete at position\n5.display\n6.exit\n\nchoice :");
scanf("%d",&n);
if(n==1)
{
printf("\nenter an element :");
scanf("%d",&item);
count++;
}
if(n==2 || n==3 || n==4 ||n==5)
{
if(head==0)
{
printf("\n\nlist is empty");
continue;
}
}
switch(n)
{
case 1: insert_at_front(item);
break;




case 2:delete_at_front();
break;

case 3:delete_at_rear(count);
break;

case 4:printf("\nenter position :");
scanf("%d",&pos);
delete_at_position(pos,count);
break;

case 5: display();
break;

case 6: exit(0);

default: printf("\nINVALID INPUT");
}
}
return 0;
}
